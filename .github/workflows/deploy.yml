name: workflow

on:
  push:
    branches:
      - main

jobs:
  dependencies:
    name: Dependencies
    runs-on: ubuntu-latest

    container: python:3.10
    steps:
      - uses: actions/checkout@v3

      - name: Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: /root/.venv
          key: ${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Create virtual environment
        if: steps.cache.outputs.cache-hit != 'true'
        run: python3 -m venv .venv
        working-directory: /root

      - name: Activate virtual environment
        run: echo '/root/.venv/bin' >> $GITHUB_PATH

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          pip install poetry
          poetry config virtualenvs.create false
          poetry install

      - name: Export requirements.txt
        run: poetry export -vv --without-hashes --no-ansi --no-interaction --format requirements.txt --output requirements.txt

      - uses: actions/upload-artifact@v2
        with:
          name: requirements.txt
          path: requirements.txt

  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: dependencies

    container: python:3.10.3-slim

    steps:
      - uses: actions/checkout@v3

      - name: Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: /root/.venv
          key: ${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Activate virtual environment
        run: echo '/root/.venv/bin' >> $GITHUB_PATH

      - name: Run tests with pytest
        run: pytest -s

  setup-build-publish-deploy:
    name: Setup, Build, Publish and Deploy
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - uses: actions/checkout@v3

      - name: GCP Auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'

      - uses: actions/download-artifact@v2
        with:
          name: requirements.txt
        
      - name: Build
        run: |-
          gcloud builds submit \
            --quiet \
            --tag gcr.io/${{ secrets.GCP_PROJECT }}/fast-api-example:${{  github.sha }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: 'google-github-actions/deploy-cloudrun@v0'
        with:
          service: fast-api-example
          image: gcr.io/${{ secrets.GCP_PROJECT }}/fast-api-example:${{  github.sha }}
